#!/opt/homebrew/bin/bash
# vim: ai:ts=4:sw=4:noet
# Dynamically change your colorscheme

declare -A SUPPORTED=(
	["nord"]=""
	["nightowl"]=""
	["onedark"]=""
	["solarized"]="dark light"
	["dracula"]=""
	["gotham"]=""
	["ayu"]="dark light mirage"
	["gruvbox"]="dark light"
	["palenight"]=""
)

function in_array {
	IFS=' ' read -ra array <<< $2

	if [[ ${#array[@]} = 0 && "$1" = "" ]]
	then
		return 1
	fi

	if [[ ( ${#array[@]} == 0 && "$1" != "" ) ||
		( ${#array[@]} != 0 && "$1" == "" ) ]]
	then
		return 0
	fi

	for e in ${array[*]}
	do
		if [[ "$e" == "$1" ]]
		then
			return 1
		fi
	done

	return 0
}

print_help() {
    echo "You must provide a colorscheme as an argument to the script."
    echo "You can additionally provide variants of that colorscheme as a second argument."
    echo "Note that flags must precede the colorscheme name."
    echo ""
    echo "The supported colorschemes are:"
	for elem in "${!SUPPORTED[@]}"
    do
        echo -n "  $elem"
		IFS=' ' read -ra variants <<< "${SUPPORTED[${elem}]}"
		if [ ${#variants[@]} != 0 ]
		then
			echo -n " [ "
			for v in "${variants[@]}"
			do
				echo -n "${v} "
			done
			echo -n "]"
		fi
		echo ""
    done
    echo ""
    echo "Example: \"color onedark\" or \"color ayu mirage\"."
}

while getopts 'h' flag; do
    case "${flag}" in
        h) print_help
           exit 0 ;;
        *) print_help
           exit 1 ;;
    esac
done
shift $(( OPTIND - 1 ))

color=$1
variant=$2

# Checks
if [ "$1" == "" ];
then
    echo "ERROR: You need to specify a color."
	echo "Use \"color -h\" for help."
    exit 1
fi

if [[ -v "$SUPPORTED[${color}]" ]];
then
    echo "ERROR: The proposed color is not currently supported."
	echo "Use \"color -h\" for help."
    exit 1
fi

IFS=' ' read -ra variants <<< "${SUPPORTED[$color]}"
if in_array "$variant" "${variants[*]}"
then
    echo "ERROR: You need to specify a valid variant for the chosen color."
	echo "Use \"color -h\" for help."
    exit 1
fi

# Neovim
sed -i '' 's/colors_name\ =\ ".*"/colors_name\ =\ "'"$color"'"/g' ~/.config/nvim/lua/colors.lua
if [ "$variant" != "" ]
then
    if [ "$color" == "ayu" ]
    then
        if [ "$variant" == "mirage" ]
        then
            sed -i '' "s/mirage\ =\ .*,/mirage\ =\ true,/g" ~/.config/nvim/lua/plugins/configs/colorschemes/ayu/init.lua
        else
            sed -i '' "s/mirage\ =\ .*,/mirage\ =\ false,/g" ~/.config/nvim/lua/plugins/configs/colorschemes/ayu/init.lua
        fi
    fi

    if [ "$variant" == "mirage" ]
    then
        sed -i '' 's/set\ background=.*")/set\ background=dark")/g' ~/.config/nvim/lua/colors.lua
    else
        sed -i '' 's/set\ background=.*")/set\ background='"$variant"'")/g' ~/.config/nvim/lua/colors.lua
    fi
else
    sed -i '' 's/set\ background=.*")/set\ background=dark")/g' ~/.config/nvim/lua/colors.lua
fi
nvim-ctrl 'source ~/.config/nvim/lua/colors.lua'

# Alacritty
if [ "$variant" != "" ]
then
    sed -i '' 's/colors:\ \*.*/colors:\ \*'"$color"'-'"$variant"'/g' ~/.config/alacritty/alacritty.yml
else
    sed -i '' 's/colors:\ \*.*/colors:\ \*'"$color"'/g' ~/.config/alacritty/alacritty.yml
fi

# Tmux
if [ "$variant" != "" ]
then
	sed -i '' 's/source-file.*colorschemes.*/source-file\ \~\/\.config\/tmux\/colorschemes\/'"$color"''"-$variant"'\.tmux\.conf/g' ~/.config/tmux/tmux.conf
else
	sed -i '' 's/source-file.*colorschemes.*/source-file\ \~\/\.config\/tmux\/colorschemes\/'"$color"'\.tmux\.conf/g' ~/.config/tmux/tmux.conf
fi
tmux source-file ~/.tmux.conf
tmux source-file ~/.tmux.conf

exit 0
